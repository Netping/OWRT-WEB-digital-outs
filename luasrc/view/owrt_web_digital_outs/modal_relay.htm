<%
	local config = "owrt_digital_outs"
	local uci = require "luci.model.uci".cursor()
	local util = require "luci.util"
	local log = require "luci.model.owrt_web_digital_outs.log"
	local globals = uci:get_all(config, "globals")

%>
<%
	local adapter_list = require "luci.model.owrt_web_digital_outs.relay.adapter_list"
	local dropdown, dropdown_js, name = {}, '', ''
	for adptype, adapter in pairs(adapter_list) do
		print(adapter():render("cssfile"))
		print(adapter():render("validator"))
		print(adapter():render("widgetfile"))
		dropdown[#dropdown+1] = string.format('"%s": "%s"', adapter():getName(), adapter():getLabel())
	end
	dropdown_js = "{" .. table.concat(dropdown, ", ") .. "}"

%>
<%+owrt_web_digital_outs/ui_widget/UIAdapterEmpty.js%>
<%+owrt_web_digital_outs/ui_override/DropdownProto.js%>

<script type="text/javascript">
//<![CDATA[

// gets a record from uci like <settings.globals.proto='first.Протокол 1' 'second.Протокол 2' 'third.Протокол 3'>
// returns object like {"first": "Протокол 1", "second": "Протокол 2", "third": "Протокол 3"}
function widgetPopulation(uci_section, uci) {
	var section = uci.get("<%=config%>", uci_section) || [];
	return function(uci_option) {
		var population = {}
		if (section[uci_option]) {
			section[uci_option].forEach(function(p) {
				population[p.split(".")[0]] = p.split(".")[1];
			})
		}
		return population
	}
}

function edit_relay(btn) {
	var globals_data = {}
	var relay_id = btn.getAttribute("data-relay") || null;
	L.require("ui").then(function(ui){
		L.require("uci").then(function(uci) {
			uci.load("<%=config%>").then(function(out){
				globals_data = uci.get("<%=config%>", "globals");
				var globals = widgetPopulation("globals", uci),
					relay_data = uci.get("<%=config%>", relay_id),
					embedded = relay_data["embedded"] == '1' ? true : false,
					adapter_data = {},
					adapter_widgets = {};

				var index = relay_data[".index"]

				var proto = new ui.DropdownProto(relay_data["proto"], <%= dropdown_js %>, { 
					disabled: embedded,
					sort: true
				});

				var state_on_term;
				if (relay_data["state_alias_1"]) {
					state_on_term = new ui.Textfield(relay_data["state_alias_1"], { 
						optional: false,
						datatype: "rangelength(2,64)" });
				}
				else {
					state_on_term = new ui.Textfield(globals("default_state")["1"], { 
						optional: false,
						datatype: "rangelength(2,64)" });
				}

				var state_off_term;
				if (relay_data["state_alias_0"]) {
					state_off_term = new ui.Textfield(relay_data["state_alias_0"], { 
						optional: false,
						datatype: "rangelength(2,64)" });
				}
				else {
					state_off_term = new ui.Textfield(globals("default_state")["0"], { 
						optional: false,
						datatype: "rangelength(2,64)" });
				}

				// Make dropdown for settings.relay.number = 1..16
				var maxn = globals_data["relay_max_number"] || '0'
				var rnums = {1: 1}
				for (var i=1; i <= parseInt(maxn, 10); i++) {
					rnums[i] = i
				}
				// var relay_number = new ui.Dropdown(relay_data["number"], rnums, { disabled: embedded, sort: false });


				// ADAPTER INITS
				<%
					for adptype, adapter in pairs(adapter_list) do
						print(adapter():render("jsinit"))
					end
				%>
				var empty_adapter = new ui.AdapterEmpty()


				//var restart_time = new ui.TextFieldStyled(relay_data["restart_time"], { 
				//		maxlength: 3, 
				//		datatype: "uinteger",
				//		htmlStyle: "width: 70px"
				//	});

				var memo = new ui.Textfield(relay_data["memo"], {
					datatype: "rangelength(4,128)" });

				var emptyProto = new ui.AdapterEmpty()

				L.showModal('<%:douts_edit_output_title%>', [
					E('div', { class: 'cbi-map' }, [
						E('div', { class: 'cbi-map-section' }, [
							E('div', { class: 'cbi-map-section-node' }, [
								E('div', { class: 'cbi-value' }, [
									E('label', { 'class': 'cbi-value-title memo-edit' }, _("douts_memo") + ":"),
									E('div', { class: 'cbi-value-field memo-edit' }, [
										memo.render()
									])
								]),
								E('div', { class: 'cbi-value' }, [
									E('label', { 'class': 'cbi-value-title'}, _("douts_state_description") + ":"),
									E('div', { class: 'cbi-value-field' }, [
										E('table', {class: 'cbi-2cols'}, [
											E('tr', [E('td', [state_on_term.render()]), E('td', _("douts_state_description_on"))]),
											E('tr', [E('td', [state_off_term.render()]), E('td', _("douts_state_description_off"))])
										])
									])
								]),
								E('div', { class: 'cbi-value' }, [
									E('label', { 'class': 'cbi-value-title' }, _("douts_proto") + ":"),
									E('div', { class: 'cbi-value-field' }, [
										E('div', { class: 'cbi-value-field-flex'}, [
											E('div', { class: 'cbi-value-field-1col'}, [
												proto.render()
											]),
											E('div', { class: 'cbi-value-field-2col'}, [
												// ADAPTER WIDGETS RENDER
												//emptyProto.render(),
												<%
													for atype, adapter in pairs(adapter_list) do
														print(adapter():render("jsrender") .. ",\n")
													end
												%>
												//E('div', { class: 'table modal-section-param more-params'}, [
												//	E('div', {class: 'tr table-titles'}, [
												//		E('div', {class: 'th', style: 'width: 100%'}, _("Параметры подключения реле")),
												//		E('div', {class: 'th'}, _("Значение")),
												//	]),
												//	E('div', {class: 'tr cbi-rowstyle-1'}, [
												//		E('div', {class: 'td'}, "Номер реле на удалённом устройстве"),
												//		E('div', {class: 'td', style: "text-align: right;"}, [relay_number.render()])
												//	]),
												//	E('div', {class: 'tr cbi-rowstyle-2'}, [
												//		E('div', {class: 'td'}, "Время перезагрузки реле"),
												//		E('div', {class: 'td', style: "text-align: right;"}, [restart_time.render()])
												//	])
												//]),
												//E('button', {
												//	'class': 'cbi-button cbi-button-apply',
												//	'data-action': 'show',
												//	'style': 'display: initial;',
												//	'click': ui.createHandlerFn(this, 'toggle_more')
												//}, _('Дополнительные параметры') )
											])
										])
									])
								]),
							])
						])
					]),

					E('div', { class: 'cbi-value-field' }, [
						E('div', { 
							class: 'btn', 
							click: function() { L.hideModal() }
						}, _("douts_close")),
						' ',
						E('div', { class: 'btn success', "name": "apply",
							'click': ui.createHandlerFn(this, function() {
								<%
									for atype, adapter in pairs(adapter_list) do
										-- print(string.format('adapter_data["%s"] = %s', atype, adapter():render("getvalues")))
										-- print(string.format('adapter_widgets["%s"] = %s', atype, adapter():render("getfields")))
										print('adapter_data[' .. atype .. '.proto] = ' .. adapter():render("getvalues"))
										print('adapter_widgets[' .. atype .. '.proto] = ' .. adapter():render("getfields"))
									end
								%>

								// Remove inactive adapter's data
								for(name in adapter_data) {
									if(name != proto.getValue()) {
										delete adapter_data[name]
										delete adapter_widgets[name]
									}
								}

								// Check all form validity
								var widget_list = [proto, state_on_term, state_off_term];
								//if(adapter_widgets[proto.getValue()] != undefined) {
								//	widget_list = widget_list.concat(adapter_widgets[proto.getValue()])
								//}

								var form_valid = true;
								for(var w of widget_list) {
									w.triggerValidation()
									if(!w.isValid()) {
										form_valid = false
										break;
									}
								}
								if (form_valid) {
									relay_data = uci.get("<%=config%>", 'relay_prototype_' + proto.getValue().toLowerCase())
									relay_data[".name"] = relay_id
									relay_data[".type"] = 'info'
									relay_data[".index"] = index
									relay_data["memo"] = memo.getValue()
									relay_data["proto"] = proto.getValue()
									relay_data["state_alias_0"] = state_off_term.getValue()
									relay_data["state_alias_1"] = state_on_term.getValue()
									relay_data = Object.assign(relay_data, adapter_data[proto.getValue()]);
									return handleEdit(relay_id, relay_data, globals_data, adapter_data);
								}
								else {
									return 0;
								}

							})
						}, _("douts_save"))
					])
				]);
			})	
		})
	})
}

function handleEdit(relay_id, relay_data, globals_data, adapter_data) {
	send_action("edit", relay_id, { "relay_data": relay_data, "globals_data": globals_data, "adapter_data": adapter_data } )
}
//]]>
</script>